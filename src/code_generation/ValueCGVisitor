value[[IntLiteral: exp -> INT_CONSTANT]]=
    <pushi > exp.value

value[[RealLiteral: exp -> REAL_CONSTANT]]=
    <pushf > exp.value

value[[CharacterLiteral: exp -> CHAR_CONSTANT]]=
    <pushb > (int)exp.value

value[[Variable: exp -> ID]]=
    address[[exp]]
    <load> exp.type.suffix()

value[[Arithmetic: exp1 -> exp2 (+|-|*|/|%) exp3]]=
         if(exp2.type instanceof CharType){
            value[[exp2]]
            <b2i>
            value[[exp3]]
            <b2i>
         } else{
            value[[exp2]]
            value[[exp3]]
         }
         switch(exp1.operator){
             case "+": <add> exp1.type.suffix() break;
             case "-": <sub> exp1.type.suffix() break;
             case "/": <div> exp1.type.suffix() break;
             case "*": <mul> exp1.type.suffix() break;
             case "%": <mod> exp1.type.suffix() break;
         }

value[[LogicalComparator: exp1 -> exp2 (>|>=|<|<=|!=|==) exp3]]=
         value[[exp2]]
         value[[exp3]]
         switch(exp1.operator){
             case ">": <gt> exp1.type.suffix() break;
             case "<": <lt> exp1.type.suffix() break;
             case ">=": <ge> exp1.type.suffix() break;
             case "<=": <le> exp1.type.suffix() break;
             case "==": <eq> exp1.type.suffix() break;
             case "!=": <ne> exp1.type.suffix() break;
         }

value[[LogicalDoor: exp1 -> exp2 (&&| ||) exp3]]=
    value[[exp2]]
    value[[exp3]]
    switch(exp1.operator){
        case "&&": <and> break;
        case "||": <or> break;
    }

value[[UnaryNegation: exp1 -> exp2]]=
    value[[exp2]]
    <not>

value[[UnaryMinus: exp1 -> exp2]]=
    <push> exp1.type.suffix() 0
    if(exp2.type instanceof CharType){
        value[[exp2]]
        <b2i>
    } else{
        value[[exp2]]
    }
    <sub> exp1.type.suffix()

value[[CastType: exp1 -> type exp2]]=
    value[[exp2]]
    exp2.type.convertTo(type)

value[[FieldAccess: exp1 -> exp2 ID]]=
    address[[exp1]]
    <load> exp1.type.suffix()

value[[Indexing: exp1 -> exp2 exp3]]=
    address[[exp1]]
    <load> exp1.type.suffix()

value[[FuncInv: exp1 -> exp2 exp3*]]=
    exp3*.foreach(exp -> value[[exp]])
    <call > exp2.name

